MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspack{"@context":"https://schema.org","author":{"@type":"Organization","name":"Vercel"},"headline":"Guides: Development Environment","description":"Learn how to optimize your local development environment with Next.js.","url":"https://nextjs.org/docs/app/guides/local-development","image":"https://nextjs.org/api/docs-og?title=Guides: Development Environment","@type":"TechArticle"}On this pageLocal dev vs. productionImproving local dev performance1. Check your computer's antivirus2. Update Next.js and enable Turbopack3. Check your importsIcon librariesBarrel filesOptimize package imports4. Check your Tailwind CSS setup5. Check custom webpack settings6. Optimize memory usage7. Server Components and data fetching8. Consider local development over DockerTools for finding problemsDetailed fetch loggingTurbopack tracingStill having problems?Edit this page on GitHub Scroll to top App RouterGuidesDevelopment EnvironmentHow to optimize your local development environmentNext.js is designed to provide a great developer experience. As your application grows, you might notice slower compilation times during local development. This guide will help you identify and fix common compile-time performance issues. Local dev vs. production The development process with next dev is different than next build and next start. next dev compiles routes in your application as you open or navigate to them. This enables you to start the dev server without waiting for every route in your application to compile, which is both faster and uses less memory. Running a production build applies other optimizations, like minifying files and creating content hashes, which are not needed for local development. Improving local dev performance 1. Check your computer's antivirus Antivirus software can slow down file access. Try adding your project folder to the antivirus exclusion list. While this is more common on Windows machines, we recommend this for any system with an antivirus tool installed. 2. Update Next.js and enable Turbopack Make sure you're using the latest version of Next.js. Each new version often includes performance improvements. Turbopack is a new bundler integrated into Next.js that can improve local performance. npm install next@latest npm run dev --turbopack Learn more about Turbopack. See our upgrade guides and codemods for more information. 3. Check your imports The way you import code can greatly affect compilation and bundling time. Learn more about optimizing package bundling and explore tools like Dependency Cruiser or Madge. Icon libraries Libraries like @material-ui/icons, @phosphor-icons/react, or react-icons can import thousands of icons, even if you only use a few. Try to import only the icons you need: // Instead of this: import { TriangleIcon } from '@phosphor-icons/react' // Do this: import { TriangleIcon } from '@phosphor-icons/react/dist/csr/Triangle' You can often find what import pattern to use in the documentation for the icon library you're using. This example follows @phosphor-icons/react recommendation. Libraries like react-icons includes many different icon sets. Choose one set and stick with that set. For example, if your application uses react-icons and imports all of these: pi (Phosphor Icons) md (Material Design Icons) tb (tabler-icons) cg (cssgg) Combined they will be tens of thousands of modules that the compiler has to handle, even if you only use a single import from each. Barrel files "Barrel files" are files that export many items from other files. They can slow down builds because the compiler has to parse them to find if there are side-effects in the module scope by using the import. Try to import directly from specific files when possible. Learn more about barrel files and the built-in optimizations in Next.js. Optimize package imports Next.js can automatically optimize imports for certain packages. If you are using packages that utilize barrel files, add them to your next.config.js: module.exports = { experimental: { optimizePackageImports: ['package-name'], }, } Turbopack automatically analyzes imports and optimizes them. It does not require this configuration. 4. Check your Tailwind CSS setup If you're using Tailwind CSS, make sure it's set up correctly. A common mistake is configuring your content array in a way which includes node_modules or other large directories of files that should not be scanned. Tailwind CSS version 3.4.8 or newer will warn you about settings that might slow down your build. In your tailwind.config.js, be specific about which files to scan: module.exports = { content: [ './src/**/*.{js,ts,jsx,tsx}', // Good // This might be too broad // It will match `packages/**/node_modules` too // '../../packages/**/*.{js,ts,jsx,tsx}', ], } Avoid scanning unnecessary files: module.exports = { content: [ // Better - only scans the 'src' folder '../../packages/ui/src/**/*.{js,ts,jsx,tsx}', ], } 5. Check custom webpack settings If you've added custom webpack settings, they might be slowing down compilation. Consider if you really need them for local development. You can optionally only include certain tools for production builds, or explore moving to Turbopack and using loaders. 6. Optimize memory usage If your app is very large, it might need more memory. Learn more about optimizing memory usage. 7. Server Components and data fetching Changes to Server Components cause the entire page to re-render locally in order to show the new changes, which includes fetching new data for the component. The experimental serverComponentsHmrCache option allows you to cache fetch responses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls. Learn more about the experimental option. 8. Consider local development over Docker If you're using Docker for development on Mac or Windows, you may experience significantly slower performance compared to running Next.js locally. Docker's filesystem access on Mac and Windows can cause Hot Module Replacement (HMR) to take seconds or even minutes, while the same application runs with fast HMR when developed locally. This performance difference is due to how Docker handles filesystem operations outside of Linux environments. For the best development experience: Use local development (npm run dev or pnpm dev) instead of Docker during development Reserve Docker for production deployments and testing production builds If you must use Docker for development, consider using Docker on a Linux machine or VM Learn more about Docker deployment for production use. Tools for finding problems Detailed fetch logging Use the logging.fetches option in your next.config.js file, to see more detailed information about what's happening during development: module.exports = { logging: { fetches: { fullUrl: true, }, }, } Learn more about fetch logging. Turbopack tracing Turbopack tracing is a tool that helps you understand the performance of your application during local development. It provides detailed information about the time taken for each module to compile and how they are related. Make sure you have the latest version of Next.js installed. Generate a Turbopack trace file: NEXT_TURBOPACK_TRACING=1 npm run dev Navigate around your application or make edits to files to reproduce the problem. Stop the Next.js development server. A file called trace-turbopack will be available in the .next folder. You can interpret the file using next internal trace [path-to-file]: next internal trace .next/trace-turbopack On versions where trace is not available, the command was named turbo-trace-server: next internal turbo-trace-server .next/trace-turbopack Once the trace server is running you can view the trace at https://trace.nextjs.org/. By default the trace viewer will aggregate timings, in order to see each individual time you can switch from "Aggregated in order" to "Spans in order" at the top right of the viewer. Still having problems? Share the trace file generated in the Turbopack Tracing section and share it on GitHub Discussions or Discord.PreviousLazy LoadingNextMDXWas this helpful? supported.Send
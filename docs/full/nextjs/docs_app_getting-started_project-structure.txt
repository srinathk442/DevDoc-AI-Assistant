MenuUsing App RouterFeatures available in /appUsing Latest Version15.3.4Getting StartedInstallationProject StructureLayouts and PagesLinking and NavigatingServer and Client ComponentsPartial PrerenderingFetching DataUpdating DataCaching and RevalidatingError HandlingCSSImage OptimizationFont OptimizationMetadata and OG imagesRoute Handlers and MiddlewareDeployingUpgradingGuidesAnalyticsAuthenticationBackend for FrontendCachingCI Build CachingContent Security PolicyCSS-in-JSCustom ServerData SecurityDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationJSON-LDLazy LoadingDevelopment EnvironmentMDXMemory UsageMigratingApp RouterCreate React AppViteMulti-tenantMulti-zonesOpenTelemetryPackage BundlingPrefetchingProductionPWAsRedirectingSassScriptsSelf-HostingSPAsStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 14Version 15VideosAPI ReferenceDirectivesuse cacheuse clientuse serverComponentsFontForm ComponentImage ComponentLink ComponentScript ComponentFile-system conventionsdefault.jsDynamic Segmentserror.jsforbidden.jsinstrumentation.jsinstrumentation-client.jsIntercepting Routeslayout.jsloading.jsmdx-components.jsmiddleware.jsnot-found.jspage.jsParallel Routespublicroute.jsRoute GroupsRoute Segment Configsrctemplate.jsunauthorized.jsMetadata Filesfavicon, icon, and apple-iconmanifest.jsonopengraph-image and twitter-imagerobots.txtsitemap.xmlFunctionsaftercacheLifecacheTagconnectioncookiesdraftModefetchforbiddengenerateImageMetadatagenerateMetadatagenerateSitemapsgenerateStaticParamsgenerateViewportheadersImageResponseNextRequestNextResponsenotFoundpermanentRedirectredirectrevalidatePathrevalidateTagunauthorizedunstable_cacheunstable_noStoreunstable_rethrowuseLinkStatususeParamsusePathnameuseReportWebVitalsuseRouteruseSearchParamsuseSelectedLayoutSegmentuseSelectedLayoutSegmentsuserAgentConfigurationnext.config.jsallowedDevOriginsappDirassetPrefixauthInterruptsbasePathcacheLifecompresscrossOrigincssChunkingdevIndicatorsdistDirdynamicIOenveslintexpireTimeexportPathMapgenerateBuildIdgenerateEtagsheadershtmlLimitedBotshttpAgentOptionsimagescacheHandlerinlineCssloggingmdxRsonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderpprproductionBrowserSourceMapsreactCompilerreactMaxHeadersLengthreactStrictModeredirectsrewritessassOptionsserverActionsserverComponentsHmrCacheserverExternalPackagesstaleTimesstaticGeneration*tainttrailingSlashtranspilePackagesturbopacktypedRoutestypescripturlImportsuseCacheuseLightningcssviewTransitionwebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-appnext CLIEdge RuntimeTurbopackGetting StartedInstallationProject StructureImagesFontsCSSDeployingGuidesAMPAnalyticsAuthenticationBabelCI Build CachingContent Security PolicyCSS-in-JSCustom ServerDebuggingDraft ModeEnvironment VariablesFormsISRInstrumentationInternationalizationLazy LoadingMDXMigratingApp RouterCreate React AppViteMulti-ZonesOpenTelemetryPackage BundlingPostCSSPreview ModeProductionRedirectingSassScriptsSelf-HostingStatic ExportsTailwind CSSTestingCypressJestPlaywrightVitestThird Party LibrariesUpgradingCodemodsVersion 10Version 11Version 12Version 13Version 14Version 9Building Your ApplicationRoutingPages and LayoutsDynamic RoutesLinking and NavigatingCustom AppCustom DocumentAPI RoutesCustom ErrorsRenderingServer-side Rendering (SSR)Static Site Generation (SSG)Automatic Static OptimizationClient-side Rendering (CSR)Data FetchinggetStaticPropsgetStaticPathsForms and MutationsgetServerSidePropsClient-side FetchingConfiguringError HandlingAPI ReferenceComponentsFontFormHeadImageImage (Legacy)LinkScriptFile-system conventionsinstrumentation.jsMiddlewarepublicsrc DirectoryFunctionsgetInitialPropsgetServerSidePropsgetStaticPathsgetStaticPropsNextRequestNextResponseuseAmpuseReportWebVitalsuseRouteruserAgentConfigurationnext.config.js OptionsallowedDevOriginsassetPrefixbasePathbundlePagesRouterDependenciescompresscrossOrigindevIndicatorsdistDirenveslintexportPathMapgenerateBuildIdgenerateEtagsheadershttpAgentOptionsimagesonDemandEntriesoptimizePackageImportsoutputpageExtensionspoweredByHeaderproductionBrowserSourceMapsreactStrictModeredirectsrewritesRuntime ConfigserverExternalPackagestrailingSlashtranspilePackagesturbotypescripturlImportsuseLightningcsswebpackwebVitalsAttributionTypeScriptESLintCLIcreate-next-app CLInext CLIEdge RuntimeTurbopackArchitectureAccessibilityFast RefreshNext.js CompilerSupported BrowsersCommunityContribution GuideRspack{"@context":"https://schema.org","author":{"@type":"Organization","name":"Vercel"},"headline":"Getting Started: Project Structure","description":"Learn the folder and file conventions in Next.js, and how to organize your project.","url":"https://nextjs.org/docs/app/getting-started/project-structure","image":"https://nextjs.org/api/docs-og?title=Getting Started: Project Structure","@type":"TechArticle"}On this pageFolder and file conventionsTop-level foldersTop-level filesRouting FilesNested routesDynamic routesRoute Groups and private foldersParallel and Intercepted RoutesMetadata file conventionsApp iconsOpen Graph and Twitter imagesSEOOrganizing your projectComponent hierarchyColocationPrivate foldersRoute groupssrc folderExamplesStore project files outside of appStore project files in top-level folders inside of appSplit project files by feature or routeOrganize routes without affecting the URL pathOpting specific segments into a layoutOpting for loading skeletons on a specific routeCreating multiple root layoutsEdit this page on GitHub Scroll to top App RouterGetting StartedProject StructureProject structure and organizationThis page provides an overview of all the folder and file conventions in Next.js, and recommendations for organizing your project. Folder and file conventions Top-level folders Top-level folders are used to organize your application's code and static assets. appApp RouterpagesPages RouterpublicStatic assets to be servedsrcOptional application source folder Top-level files Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables. Next.jsnext.config.jsConfiguration file for Next.jspackage.jsonProject dependencies and scriptsinstrumentation.tsOpenTelemetry and Instrumentation filemiddleware.tsNext.js request middleware.envEnvironment variables.env.localLocal environment variables.env.productionProduction environment variables.env.developmentDevelopment environment variables.eslintrc.jsonConfiguration file for ESLint.gitignoreGit files and folders to ignorenext-env.d.tsTypeScript declaration file for Next.jstsconfig.jsonConfiguration file for TypeScriptjsconfig.jsonConfiguration file for JavaScript Routing Files layout.js .jsx .tsxLayoutpage.js .jsx .tsxPageloading.js .jsx .tsxLoading UInot-found.js .jsx .tsxNot found UIerror.js .jsx .tsxError UIglobal-error.js .jsx .tsxGlobal error UIroute.js .tsAPI endpointtemplate.js .jsx .tsxRe-rendered layoutdefault.js .jsx .tsxParallel route fallback pageNested routes folderRoute segmentfolder/folderNested route segmentDynamic routes [folder]Dynamic route segment[...folder]Catch-all route segment[[...folder]]Optional catch-all route segmentRoute Groups and private folders (folder)Group routes without affecting routing_folderOpt folder and all child segments out of routingParallel and Intercepted Routes @folderNamed slot(.)folderIntercept same level(..)folderIntercept one level above(..)(..)folderIntercept two levels above(...)folderIntercept from rootMetadata file conventions App icons favicon.icoFavicon fileicon.ico .jpg .jpeg .png .svgApp Icon fileicon.js .ts .tsxGenerated App Iconapple-icon.jpg .jpeg, .pngApple App Icon fileapple-icon.js .ts .tsxGenerated Apple App IconOpen Graph and Twitter images opengraph-image.jpg .jpeg .png .gifOpen Graph image fileopengraph-image.js .ts .tsxGenerated Open Graph imagetwitter-image.jpg .jpeg .png .gifTwitter image filetwitter-image.js .ts .tsxGenerated Twitter imageSEO sitemap.xmlSitemap filesitemap.js .tsGenerated Sitemaprobots.txtRobots filerobots.js .tsGenerated Robots file Organizing your project Next.js is unopinionated about how you organize and colocate your project files. But it does provide several features to help you organize your project.Component hierarchy The components defined in special files are rendered in a specific hierarchy: layout.js template.js error.js (React error boundary) loading.js (React suspense boundary) not-found.js (React error boundary) page.js or nested layout.js The components are rendered recursively in nested routes, meaning the components of a route segment will be nested inside the components of its parent segment.Colocation In the app directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path.However, even though route structure is defined through folders, a route is not publicly accessible until a page.js or route.js file is added to a route segment.And, even when a route is made publicly accessible, only the content returned by page.js or route.js is sent to the client.This means that project files can be safely colocated inside route segments in the app directory without accidentally being routable. Good to know: While you can colocate your project files in app you don't have to. If you prefer, you can keep them outside the app directory. Private folders Private folders can be created by prefixing a folder with an underscore: _folderNameThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.Since files in the app directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for: Separating UI logic from routing logic. Consistently organizing internal files across a project and the Next.js ecosystem. Sorting and grouping files in code editors. Avoiding potential naming conflicts with future Next.js file conventions. Good to know: While not a framework convention, you might also consider marking files outside private folders as "private" using the same underscore pattern. You can create URL segments that start with an underscore by prefixing the folder name with %5F (the URL-encoded form of an underscore): %5FfolderName. If you don't use private folders, it would be helpful to know Next.js special file conventions to prevent unexpected naming conflicts. Route groups Route groups can be created by wrapping a folder in parenthesis: (folderName)This indicates the folder is for organizational purposes and should not be included in the route's URL path.Route groups are useful for: Organizing routes by site section, intent, or team. e.g. marketing pages, admin pages, etc. Enabling nested layouts in the same route segment level: Creating multiple nested layouts in the same segment, including multiple root layouts Adding a layout to a subset of routes in a common segment src folder Next.js supports storing application code (including app) inside an optional src folder. This separates application code from project configuration files which mostly live in the root of a project.Examples The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project. Good to know: In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui, utils, hooks, styles, etc. Store project files outside of app This strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes.Store project files in top-level folders inside of app This strategy stores all application code in shared folders in the root of the app directory.Split project files by feature or route This strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them.Organize routes without affecting the URL path To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. (marketing) or (shop)).Even though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout.js file inside their folders.Opting specific segments into a layout To opt specific routes into a layout, create a new route group (e.g. (shop)) and move the routes that share the same layout into the group (e.g. account and cart). The routes outside of the group will not share the layout (e.g. checkout).Opting for loading skeletons on a specific route To apply a loading skeleton via a loading.js file to a specific route, create a new route group (e.g., /(overview)) and then move your loading.tsx inside that route group.Now, the loading.tsx file will only apply to your dashboard → overview page instead of all your dashboard pages without affecting the URL path structure.Creating multiple root layouts To create multiple root layouts, remove the top-level layout.js file, and add a layout.js file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The <html> and <body> tags need to be added to each root layout.In the example above, both (marketing) and (shop) have their own root layout.PreviousInstallationNextLayouts and PagesWas this helpful? supported.Send
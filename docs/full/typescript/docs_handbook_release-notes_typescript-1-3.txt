Protected The new protected modifier in classes works like it does in familiar languages like C++, C#, and Java. A protected member of a class is visible only inside subclasses of the class in which it is declared: tsclass Thing { protected doSomething() { /* ... */ }}class MyThing extends Thing { public myMethod() { // OK, can access protected member from subclass this.doSomething(); }}var t = new MyThing();t.doSomething(); // Error, cannot call protected member from outside class Tuple types Tuple types express an array where the type of certain elements is known, but need not be the same. For example, you may want to represent an array with a string at position 0 and a number at position 1: ts// Declare a tuple typevar x: [string, number];// Initialize itx = ["hello", 10]; // OK// Initialize it incorrectlyx = [10, "hello"]; // Error When accessing an element with a known index, the correct type is retrieved: tsconsole.log(x[0].substr(1)); // OKconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr' Note that in TypeScript 1.4, when accessing an element outside the set of known indices, a union type is used instead: tsx[3] = "world"; // OKconsole.log(x[5].toString()); // OK, 'string' and 'number' both have toStringx[6] = true; // Error, boolean isn't number or stringOn this pageProtectedTuple typesIs this page helpful? Yes NoCustomizeSite Colours:SystemAlways LightAlways DarkCode Font:CascadiaCascadia (ligatures)ConsolasDank MonoFira CodeJetBrains MonoOpenDyslexicSF MonoSource Code ProMade with ♥ in Redmond, Boston, SF & Dublin© 2012-2025 MicrosoftPrivacyTerms of UseUsing TypeScriptGet StartedDownloadCommunityPlaygroundTSConfig RefCode SamplesWhy TypeScriptDesignCommunityGet HelpBlogGitHub RepoCommunity Chat@TypeScriptMastodonStack OverflowWeb Repo
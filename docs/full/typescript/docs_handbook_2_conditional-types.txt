At the heart of most useful programs, we have to make decisions based on input. JavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs. Conditional types help describe the relation between the types of inputs and outputs. tsinterface Animal { live(): void;}interface Dog extends Animal { woof(): void;} type Example1 = Dog extends Animal ? number : string; type Example1 = number type Example2 = RegExp extends Animal ? number : string; type Example2 = stringTry Conditional types take a form that looks a little like conditional expressions (condition ? trueExpression : falseExpression) in JavaScript: ts SomeType extends OtherType ? TrueType : FalseType;Try When the type on the left of the extends is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch). From the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not Dog extends Animal and pick number or string! But the power of conditional types comes from using them with generics. For example, let’s take the following createLabel function: tsinterface IdLabel { id: number /* some fields */;}interface NameLabel { name: string /* other fields */;} function createLabel(id: number): IdLabel;function createLabel(name: string): NameLabel;function createLabel(nameOrId: string | number): IdLabel | NameLabel;function createLabel(nameOrId: string | number): IdLabel | NameLabel { throw "unimplemented";}Try These overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things: If a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome. We have to create three overloads: one for each case when we’re sure of the type (one for string and one for number), and one for the most general case (taking a string | number). For every new type createLabel can handle, the number of overloads grows exponentially. Instead, we can encode that logic in a conditional type: tstype NameOrId<T extends number | string> = T extends number ? IdLabel : NameLabel;Try We can then use that conditional type to simplify our overloads down to a single function with no overloads. tsfunction createLabel<T extends number | string>(idOrName: T): NameOrId<T> { throw "unimplemented";} let a = createLabel("typescript"); let a: NameLabel let b = createLabel(2.8); let b: IdLabel let c = createLabel(Math.random() ? "hello" : 42);let c: NameLabel | IdLabelTry Conditional Type Constraints Often, the checks in a conditional type will provide us with some new information. Just like narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against. For example, let’s take the following: tstype MessageOf<T> = T["message"];Type '"message"' cannot be used to index type 'T'.2536Type '"message"' cannot be used to index type 'T'.Try In this example, TypeScript errors because T isn’t known to have a property called message. We could constrain T, and TypeScript would no longer complain: tstype MessageOf<T extends { message: unknown }> = T["message"]; interface Email { message: string;} type EmailMessageContents = MessageOf<Email>; type EmailMessageContents = stringTry However, what if we wanted MessageOf to take any type, and default to something like never if a message property isn’t available? We can do this by moving the constraint out and introducing a conditional type: tstype MessageOf<T> = T extends { message: unknown } ? T["message"] : never; interface Email { message: string;} interface Dog { bark(): void;} type EmailMessageContents = MessageOf<Email>; type EmailMessageContents = string type DogMessageContents = MessageOf<Dog>; type DogMessageContents = neverTry Within the true branch, TypeScript knows that T will have a message property. As another example, we could also write a type called Flatten that flattens array types to their element types, but leaves them alone otherwise: tstype Flatten<T> = T extends any[] ? T[number] : T; // Extracts out the element type.type Str = Flatten<string[]>; type Str = string // Leaves the type alone.type Num = Flatten<number>; type Num = numberTry When Flatten is given an array type, it uses an indexed access with number to fetch out string[]’s element type. Otherwise, it just returns the type it was given. Inferring Within Conditional Types We just found ourselves using conditional types to apply constraints and then extract out types. This ends up being such a common operation that conditional types make it easier. Conditional types provide us with a way to infer from types we compare against in the true branch using the infer keyword. For example, we could have inferred the element type in Flatten instead of fetching it out “manually” with an indexed access type: tstype Flatten<Type> = Type extends Array<infer Item> ? Item : Type;Try Here, we used the infer keyword to declaratively introduce a new generic type variable named Item instead of specifying how to retrieve the element type of Type within the true branch. This frees us from having to think about how to dig through and probing apart the structure of the types we’re interested in. We can write some useful helper type aliases using the infer keyword. For example, for simple cases, we can extract the return type out from function types: tstype GetReturnType<Type> = Type extends (...args: never[]) => infer Return ? Return : never; type Num = GetReturnType<() => number>; type Num = number type Str = GetReturnType<(x: string) => string>; type Str = string type Bools = GetReturnType<(a: boolean, b: boolean) => boolean[]>; type Bools = boolean[]Try When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the last signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload resolution based on a list of argument types. tsdeclare function stringOrNum(x: string): number;declare function stringOrNum(x: number): string;declare function stringOrNum(x: string | number): string | number; type T1 = ReturnType<typeof stringOrNum>; type T1 = string | numberTry Distributive Conditional Types When conditional types act on a generic type, they become distributive when given a union type. For example, take the following: tstype ToArray<Type> = Type extends any ? Type[] : never;Try If we plug a union type into ToArray, then the conditional type will be applied to each member of that union. tstype ToArray<Type> = Type extends any ? Type[] : never; type StrArrOrNumArr = ToArray<string | number>; type StrArrOrNumArr = string[] | number[]Try What happens here is that ToArray distributes on: ts string | number;Try and maps over each member type of the union, to what is effectively: ts ToArray<string> | ToArray<number>;Try which leaves us with: ts string[] | number[];Try Typically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets. tstype ToArrayNonDist<Type> = [Type] extends [any] ? Type[] : never; // 'ArrOfStrOrNum' is no longer a union.type ArrOfStrOrNum = ToArrayNonDist<string | number>; type ArrOfStrOrNum = (string | number)[]TryOn this pageConditional Type ConstraintsInferring Within Conditional TypesDistributive Conditional TypesIs this page helpful? Yes NoCustomizeSite Colours:SystemAlways LightAlways DarkCode Font:CascadiaCascadia (ligatures)ConsolasDank MonoFira CodeJetBrains MonoOpenDyslexicSF MonoSource Code ProMade with ♥ in Redmond, Boston, SF & Dublin© 2012-2025 MicrosoftPrivacyTerms of UseUsing TypeScriptGet StartedDownloadCommunityPlaygroundTSConfig RefCode SamplesWhy TypeScriptDesignCommunityGet HelpBlogGitHub RepoCommunity Chat@TypeScriptMastodonStack OverflowWeb Repo